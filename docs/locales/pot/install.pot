# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 2018.11.27.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-18 13:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../install.rst:5
msgid "Pipenv & Virtual Environments"
msgstr ""

#: ../../install.rst:9
msgid "This tutorial walks you through installing and using Python packages."
msgstr ""

#: ../../install.rst:11
msgid "It will show you how to install and use the necessary tools and make strong recommendations on best practices. Keep in mind that Python is used for a great many different purposes, and precisely how you want to manage your dependencies may change based on how you decide to publish your software. The guidance presented here is most directly applicable to the development and deployment of network services (including web applications), but is also very well suited to managing development and testing environments for any kind of project."
msgstr ""

#: ../../install.rst:19
msgid "This guide is written for Python 3, however, these instructions should work fine on Python 2.7‚Äîif you are still using it, for some reason."
msgstr ""

#: ../../install.rst:24
msgid "‚ò§ Make sure you've got Python & pip"
msgstr ""

#: ../../install.rst:26
msgid "Before you go any further, make sure you have Python and that it's available from your command line. You can check this by simply running::"
msgstr ""

#: ../../install.rst:31
msgid "You should get some output like ``3.6.2``. If you do not have Python, please install the latest 3.x version from `python.org`_ or refer to the `Installing Python`_ section of *The Hitchhiker's Guide to Python*."
msgstr ""

#: ../../install.rst:35
msgid "If you're newcomer and you get an error like this:"
msgstr ""

#: ../../install.rst:44
msgid "It's because this command is intended to be run in a *shell* (also called a *terminal* or *console*). See the Python for Beginners `getting started tutorial`_ for an introduction to using your operating system's shell and interacting with Python."
msgstr ""

#: ../../install.rst:49
msgid "Additionally, you'll need to make sure you have pip available. You can check this by running::"
msgstr ""

#: ../../install.rst:55
msgid "If you installed Python from source, with an installer from `python.org`_, via `Homebrew`_ or via `Linuxbrew`_ you should already have pip. If you're on Linux and installed using your OS package manager, you may have to `install pip <https://pip.pypa.io/en/stable/installing/>`_ separately."
msgstr ""

#: ../../install.rst:58
msgid "If you plan to install Pipenv using Homebrew or Linuxbrew you can skip this step. The Homebrew/Linuxbrew installer takes care of pip for you."
msgstr ""

#: ../../install.rst:71
msgid "‚ò§ Installing Pipenv"
msgstr ""

#: ../../install.rst:73
msgid "Pipenv is a dependency manager for Python projects. If you're familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit to those tools. While pip can install Python packages, Pipenv is recommended as it's a higher-level tool that simplifies dependency management for common use cases."
msgstr ""

#: ../../install.rst:84
msgid "‚ò§ Homebrew Installation of Pipenv"
msgstr ""

#: ../../install.rst:86
msgid "`Homebrew`_ is a popular open-source package management system for macOS. For Linux users, `Linuxbrew`_  is a Linux port of that."
msgstr ""

#: ../../install.rst:88
msgid "Installing pipenv via Homebrew or Linuxbrew will keep pipenv and all of its dependencies in an isolated virtual environment so it doesn't interfere with the rest of your Python installation."
msgstr ""

#: ../../install.rst:92
msgid "Once you have installed Homebrew or Linuxbrew simply run::"
msgstr ""

#: ../../install.rst:96
#: ../../install.rst:139
msgid "To upgrade pipenv at any time::"
msgstr ""

#: ../../install.rst:102
msgid "‚ò§ Pragmatic Installation of Pipenv"
msgstr ""

#: ../../install.rst:104
msgid "If you have a working installation of pip, and maintain certain \"toolchain\" type Python modules as global utilities in your user environment, pip `user installs <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ allow for installation into your home directory. Note that due to interaction between dependencies, you should limit tools installed in this way to basic building blocks for a Python workflow like virtualenv, pipenv, tox, and similar software."
msgstr ""

#: ../../install.rst:106
msgid "To install::"
msgstr ""

#: ../../install.rst:110
msgid "This does a `user installation`_ to prevent breaking any system-wide packages. If ``pipenv`` isn't available in your shell after installation, you'll need to add the `user base`_'s binary directory to your ``PATH``."
msgstr ""

#: ../../install.rst:114
msgid "On Linux and macOS you can find the user base binary directory by running ``python -m site --user-base`` and adding ``bin`` to the end. For example, this will typically print ``~/.local`` (with ``~`` expanded to the absolute path to your home directory) so you'll need to add ``~/.local/bin`` to your ``PATH``. You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""

#: ../../install.rst:121
msgid "On Windows you can find the user base binary directory by running ``python -m site --user-site`` and replacing ``site-packages`` with ``Scripts``. For example, this could return ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would need to set your ``PATH`` to include ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your user ``PATH`` permanently in the `Control Panel`_. You may need to log out for the ``PATH`` changes to take effect."
msgstr ""

#: ../../install.rst:130
msgid "For more information, see the `user installs documentation <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_."
msgstr ""

#: ../../install.rst:145
msgid "‚ò§ Crude Installation of Pipenv"
msgstr ""

#: ../../install.rst:147
msgid "If you don't even have pip installed, you can use this crude installation method, which will bootstrap your whole system::"
msgstr ""

#: ../../install.rst:153
msgid "‚ò§ Installing packages for your project"
msgstr ""

#: ../../install.rst:155
msgid "Pipenv manages dependencies on a per-project basis. To install packages, change into your project's directory (or just an empty directory for this tutorial) and run::"
msgstr ""

#: ../../install.rst:162
msgid "Pipenv will install the excellent `Requests`_ library and create a ``Pipfile`` for you in your project's directory. The ``Pipfile`` is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary)::"
msgstr ""

#: ../../install.rst:197
msgid "‚ò§ Using installed packages"
msgstr ""

#: ../../install.rst:199
msgid "Now that Requests is installed you can create a simple ``main.py`` file to use it:"
msgstr ""

#: ../../install.rst:210
msgid "Then you can run this script using ``pipenv run``::"
msgstr ""

#: ../../install.rst:214
msgid "You should get output similar to this:"
msgstr ""

#: ../../install.rst:220
msgid "Using ``$ pipenv run`` ensures that your installed packages are available to your script. It's also possible to spawn a new shell that ensures all commands have access to your installed packages with ``$ pipenv shell``."
msgstr ""

#: ../../install.rst:226
msgid "‚ò§ Virtualenv mapping caveat"
msgstr ""

#: ../../install.rst:228
msgid "Pipenv automatically maps projects to their specific virtualenvs."
msgstr ""

#: ../../install.rst:229
msgid "The virtualenv is stored globally with the name of the project‚Äôs root directory plus the hash of the full path to the project's root (e.g., ``my_project-a3de50``)."
msgstr ""

#: ../../install.rst:230
msgid "If you change your project's path, you break such a default mapping and pipenv will no longer be able to find and to use the project's virtualenv."
msgstr ""

#: ../../install.rst:231
msgid "You might want to set ``export PIPENV_VENV_IN_PROJECT=1`` in your .bashrc/.zshrc (or any shell configuration file) for creating the virtualenv inside your project's directory, avoiding problems with subsequent path changes."
msgstr ""

#: ../../install.rst:235
msgid "‚ò§ Next steps"
msgstr ""

#: ../../install.rst:237
msgid "Congratulations, you now know how to install and use Python packages! ‚ú® üç∞ ‚ú®"
msgstr ""

