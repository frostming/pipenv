# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 2018.11.27.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-28 03:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../advanced.rst:4
msgid "Advanced Usage of Pipenv"
msgstr ""

#: ../../advanced.rst:8
msgid "This document covers some of Pipenv's more glorious and advanced features."
msgstr ""

#: ../../advanced.rst:11
msgid "‚ò§ Caveats"
msgstr ""

#: ../../advanced.rst:13
msgid "Dependencies of wheels provided in a ``Pipfile`` will not be captured by ``$ pipenv lock``."
msgstr ""

#: ../../advanced.rst:14
msgid "There are some known issues with using private indexes, related to hashing. We're actively working to solve this problem. You may have great luck with this, however."
msgstr ""

#: ../../advanced.rst:15
msgid "Installation is intended to be as deterministic as possible ‚Äî¬†use the ``--sequential`` flag to increase this, if experiencing issues."
msgstr ""

#: ../../advanced.rst:18
msgid "‚ò§ Specifying Package Indexes"
msgstr ""

#: ../../advanced.rst:20
msgid "If you'd like a specific package to be installed with a specific package index, you can do the following::"
msgstr ""

#: ../../advanced.rst:39
#: ../../advanced.rst:182
msgid "Very fancy."
msgstr ""

#: ../../advanced.rst:42
msgid "‚ò§ Using a PyPI Mirror"
msgstr ""

#: ../../advanced.rst:44
msgid "If you'd like to override the default PyPI index urls with the url for a PyPI mirror, you can use the following::"
msgstr ""

#: ../../advanced.rst:56
msgid "Alternatively, you can set the ``PIPENV_PYPI_MIRROR`` environment variable."
msgstr ""

#: ../../advanced.rst:59
msgid "‚ò§ Injecting credentials into Pipfiles via environment variables"
msgstr ""

#: ../../advanced.rst:62
msgid "Pipenv will expand environment variables (if defined) in your Pipfile. Quite useful if you need to authenticate to a private PyPI::"
msgstr ""

#: ../../advanced.rst:70
msgid "Luckily - pipenv will hash your Pipfile *before* expanding environment variables (and, helpfully, will substitute the environment variables again when you install from the lock file - so no need to commit any secrets! Woo!)"
msgstr ""

#: ../../advanced.rst:76
msgid "‚ò§ Specifying Basically Anything"
msgstr ""

#: ../../advanced.rst:78
msgid "If you'd like to specify that a specific package only be installed on certain systems, you can use `PEP 508 specifiers <https://www.python.org/dev/peps/pep-0508/>`_ to accomplish this."
msgstr ""

#: ../../advanced.rst:81
msgid "Here's an example ``Pipfile``, which will only install ``pywinusb`` on Windows systems::"
msgstr ""

#: ../../advanced.rst:92
msgid "Voil√†!"
msgstr ""

#: ../../advanced.rst:94
msgid "Here's a more complex example::"
msgstr ""

#: ../../advanced.rst:103
msgid "Magic. Pure, unadulterated magic."
msgstr ""

#: ../../advanced.rst:106
msgid "‚ò§ Using pipenv for Deployments"
msgstr ""

#: ../../advanced.rst:108
msgid "You may want to use ``pipenv`` as part of a deployment process."
msgstr ""

#: ../../advanced.rst:110
msgid "You can enforce that your ``Pipfile.lock`` is up to date using the ``--deploy`` flag::"
msgstr ""

#: ../../advanced.rst:114
msgid "This will fail a build if the ``Pipfile.lock`` is out‚Äìof‚Äìdate, instead of generating a new one."
msgstr ""

#: ../../advanced.rst:116
msgid "Or you can install packages exactly as specified in ``Pipfile.lock`` using the ``sync`` command::"
msgstr ""

#: ../../advanced.rst:122
msgid "``pipenv install --ignore-pipfile`` is nearly equivalent to ``pipenv sync``, but ``pipenv sync`` will *never* attempt to re-lock your dependencies as it is considered an atomic operation.  ``pipenv install`` by default does attempt to re-lock unless using the ``--deploy`` flag."
msgstr ""

#: ../../advanced.rst:125
msgid "Deploying System Dependencies"
msgstr ""

#: ../../advanced.rst:127
msgid "You can tell Pipenv to install a Pipfile's contents into its parent system with the ``--system`` flag::"
msgstr ""

#: ../../advanced.rst:131
msgid "This is useful for managing the system Python, and deployment infrastructure (e.g. Heroku does this)."
msgstr ""

#: ../../advanced.rst:134
msgid "‚ò§ Pipenv and Other Python Distributions"
msgstr ""

#: ../../advanced.rst:136
msgid "To use Pipenv with a third-party Python distribution (e.g. Anaconda), you simply provide the path to the Python binary::"
msgstr ""

#: ../../advanced.rst:140
msgid "Anaconda uses Conda to manage packages. To reuse Conda‚Äìinstalled Python packages, use the ``--site-packages`` flag::"
msgstr ""

#: ../../advanced.rst:145
msgid "‚ò§ Generating a ``requirements.txt``"
msgstr ""

#: ../../advanced.rst:147
msgid "You can convert a ``Pipfile`` and ``Pipfile.lock`` into a ``requirements.txt`` file very easily, and get all the benefits of extras and other goodies we have included."
msgstr ""

#: ../../advanced.rst:149
msgid "Let's take this ``Pipfile``::"
msgstr ""

#: ../../advanced.rst:158
#: ../../advanced.rst:176
msgid "And generate a ``requirements.txt`` out of it::"
msgstr ""

#: ../../advanced.rst:167
msgid "If you wish to generate a ``requirements.txt`` with only the development requirements you can do that too!  Let's take the following ``Pipfile``::"
msgstr ""

#: ../../advanced.rst:185
msgid "‚ò§ Detection of Security Vulnerabilities"
msgstr ""

#: ../../advanced.rst:187
msgid "Pipenv includes the `safety <https://github.com/pyupio/safety>`_ package, and will use it to scan your dependency graph for known security vulnerabilities!"
msgstr ""

#: ../../advanced.rst:190
msgid "Example::"
msgstr ""

#: ../../advanced.rst:231
#: ../../advanced.rst:539
msgid "‚ú®üç∞‚ú®"
msgstr ""

#: ../../advanced.rst:235
msgid "In order to enable this functionality while maintaining its permissive copyright license, `pipenv` embeds an API client key for the backend Safety API operated by pyup.io rather than including a full copy of the CC-BY-NC-SA licensed Safety-DB database. This embedded client key is shared across all `pipenv check` users, and hence will be subject to API access throttling based on overall usage rather than individual client usage."
msgstr ""

#: ../../advanced.rst:243
msgid "You can also use your own safety API key by setting the environment variable ``PIPENV_PYUP_API_KEY``."
msgstr ""

#: ../../advanced.rst:248
msgid "‚ò§ Community Integrations"
msgstr ""

#: ../../advanced.rst:250
msgid "There are a range of community-maintained plugins and extensions available for a range of editors and IDEs, as well as different products which integrate with Pipenv projects:"
msgstr ""

#: ../../advanced.rst:253
msgid "`Heroku <https://heroku.com/python>`_ (Cloud Hosting)"
msgstr ""

#: ../../advanced.rst:254
msgid "`Platform.sh <https://platform.sh/hosting/python>`_ (Cloud Hosting)"
msgstr ""

#: ../../advanced.rst:255
msgid "`PyUp <https://pyup.io>`_ (Security Notification)"
msgstr ""

#: ../../advanced.rst:256
msgid "`Emacs <https://github.com/pwalsh/pipenv.el>`_ (Editor Integration)"
msgstr ""

#: ../../advanced.rst:257
msgid "`Fish Shell <https://github.com/fisherman/pipenv>`_ (Automatic ``$ pipenv shell``!)"
msgstr ""

#: ../../advanced.rst:258
msgid "`VS Code <https://code.visualstudio.com/docs/python/environments>`_ (Editor Integration)"
msgstr ""

#: ../../advanced.rst:259
msgid "`PyCharm <https://www.jetbrains.com/pycharm/download/>`_ (Editor Integration)"
msgstr ""

#: ../../advanced.rst:261
msgid "Works in progress:"
msgstr ""

#: ../../advanced.rst:263
msgid "`Sublime Text <https://github.com/kennethreitz/pipenv-sublime>`_ (Editor Integration)"
msgstr ""

#: ../../advanced.rst:264
msgid "Mysterious upcoming Google Cloud product (Cloud Hosting)"
msgstr ""

#: ../../advanced.rst:269
msgid "‚ò§ Open a Module in Your Editor"
msgstr ""

#: ../../advanced.rst:271
msgid "Pipenv allows you to open any Python module that is installed (including ones in your codebase), with the ``$ pipenv open`` command::"
msgstr ""

#: ../../advanced.rst:281
msgid "This allows you to easily read the code you're consuming, instead of looking it up on GitHub."
msgstr ""

#: ../../advanced.rst:283
msgid "The standard ``EDITOR`` environment variable is used for this. If you're using VS Code, for example, you'll want to ``export EDITOR=code`` (if you're on macOS you will want to `install the command <https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line>`_ on to your ``PATH`` first)."
msgstr ""

#: ../../advanced.rst:286
msgid "‚ò§ Automatic Python Installation"
msgstr ""

#: ../../advanced.rst:288
msgid "If you have `pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-pyenv>`_ installed and configured, Pipenv will automatically ask you if you want to install a required version of Python if you don't already have it available."
msgstr ""

#: ../../advanced.rst:290
msgid "This is a very fancy feature, and we're very proud of it::"
msgstr ""

#: ../../advanced.rst:321
msgid "Pipenv automatically honors both the ``python_full_version`` and ``python_version`` `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ specifiers."
msgstr ""

#: ../../advanced.rst:323
msgid "üí´‚ú®üç∞‚ú®üí´"
msgstr ""

#: ../../advanced.rst:326
msgid "‚ò§ Automatic Loading of ``.env``"
msgstr ""

#: ../../advanced.rst:328
msgid "If a ``.env`` file is present in your project, ``$ pipenv shell`` and ``$ pipenv run`` will automatically load it, for you::"
msgstr ""

#: ../../advanced.rst:342
msgid "This is very useful for keeping production credentials out of your codebase. We do not recommend committing ``.env`` files into source control!"
msgstr ""

#: ../../advanced.rst:345
msgid "If your ``.env`` file is located in a different path or has a different name you may set the ``PIPENV_DOTENV_LOCATION`` environment variable::"
msgstr ""

#: ../../advanced.rst:349
msgid "To prevent pipenv from loading the ``.env`` file, set the ``PIPENV_DONT_LOAD_ENV`` environment variable::"
msgstr ""

#: ../../advanced.rst:354
msgid "‚ò§ Custom Script Shortcuts"
msgstr ""

#: ../../advanced.rst:356
msgid "Pipenv supports creating custom shortcuts in the (optional) ``[scripts]`` section of your Pipfile."
msgstr ""

#: ../../advanced.rst:358
msgid "You can then run ``pipenv run <shortcut name>`` in your terminal to run the command in the context of your pipenv virtual environment even if you have not activated the pipenv shell first."
msgstr ""

#: ../../advanced.rst:361
msgid "For example, in your Pipfile:"
msgstr ""

#: ../../advanced.rst:368
msgid "And then in your terminal::"
msgstr ""

#: ../../advanced.rst:373
msgid "Commands that expect arguments will also work. For example:"
msgstr ""

#: ../../advanced.rst:386
msgid "‚ò§ Support for Environment Variables"
msgstr ""

#: ../../advanced.rst:388
msgid "Pipenv supports the usage of environment variables in place of authentication fragments in your Pipfile. These will only be parsed if they are present in the ``[[source]]`` section. For example:"
msgstr ""

#: ../../advanced.rst:406
msgid "Environment variables may be specified as ``${MY_ENVAR}`` or ``$MY_ENVAR``."
msgstr ""

#: ../../advanced.rst:408
msgid "On Windows, ``%MY_ENVAR%`` is supported in addition to ``${MY_ENVAR}`` or ``$MY_ENVAR``."
msgstr ""

#: ../../advanced.rst:412
msgid "‚ò§ Configuration With Environment Variables"
msgstr ""

#: ../../advanced.rst:414
msgid "Pipenv comes with a handful of options that can be enabled via shell environment variables. To activate them, simply create the variable in your shell and pipenv will detect it."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_CACHE_DIR:1
msgid "Location for Pipenv to store it's package cache."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_CACHE_DIR:3
msgid "Default is to use appdir's user cache directory."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_COLORBLIND:1
msgid "If set, disable terminal colors."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_COLORBLIND:3
msgid "Some people don't like colors in their terminals, for some reason. Default is to show colors."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DEFAULT_PYTHON_VERSION:1
msgid "Use this Python version when creating new virtual environments by default."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DEFAULT_PYTHON_VERSION:3
msgid "This can be set to a version string, e.g. ``3.6``, or a path. Default is to use whatever Python Pipenv is installed under (i.e. ``sys.executable``). Command line flags (e.g. ``--python``, ``--three``, and ``--two``) are prioritized over this configuration."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DONT_LOAD_ENV:1
msgid "If set, Pipenv does not load the ``.env`` file."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DONT_LOAD_ENV:3
msgid "Default is to load ``.env`` for ``run`` and ``shell`` commands."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DONT_USE_PYENV:1
msgid "If set, Pipenv does not attempt to install Python with pyenv."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DONT_USE_PYENV:3
msgid "Default is to install Python automatically via pyenv when needed, if possible."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DOTENV_LOCATION:1
msgid "If set, Pipenv loads the ``.env`` file at the specified location."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_DOTENV_LOCATION:3
msgid "Default is to load ``.env`` from the project root, if found."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_EMULATOR:1
msgid "If set, the terminal emulator's name for ``pipenv shell`` to use."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_EMULATOR:3
msgid "Default is to detect emulators automatically. This should be set if your emulator, e.g. Cmder, cannot be detected correctly."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_HIDE_EMOJIS:1
msgid "Disable emojis in output."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_HIDE_EMOJIS:3
msgid "Default is to show emojis. This is automatically set on Windows."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_IGNORE_VIRTUALENVS:1
msgid "If set, Pipenv will always assign a virtual environment for this project."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_IGNORE_VIRTUALENVS:3
msgid "By default, Pipenv tries to detect whether it is run inside a virtual environment, and reuses it if possible. This is usually the desired behavior, and enables the user to use any user-built environments with Pipenv."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_INSTALL_TIMEOUT:1
msgid "Max number of seconds to wait for package installation."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_INSTALL_TIMEOUT:3
msgid "Defaults to 900 (15 minutes), a very long arbitrary time."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_DEPTH:1
msgid "Maximum number of directories to recursively search for a Pipfile."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_DEPTH:3
msgid "Default is 3. See also ``PIPENV_NO_INHERIT``."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_RETRIES:1
msgid "Specify how many retries Pipenv should attempt for network requests."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_RETRIES:3
msgid "Default is 0. Automatically set to 1 on CI environments for robust testing."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_ROUNDS:1
msgid "Tells Pipenv how many rounds of resolving to do for Pip-Tools."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_ROUNDS:3
msgid "Default is 16, an arbitrary number that works most of the time."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_SUBPROCESS:1
msgid "How many subprocesses should Pipenv use when installing."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_MAX_SUBPROCESS:3
msgid "Default is 16, an arbitrary number that seems to work."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_NOSPIN:1
msgid "If set, disable terminal spinner."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_NOSPIN:3
msgid "This can make the logs cleaner. Automatically set on Windows, and in CI environments."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_NO_INHERIT:1
msgid "Tell Pipenv not to inherit parent directories."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_NO_INHERIT:3
msgid "This is useful for deployment to avoid using the wrong current directory. Overwrites ``PIPENV_MAX_DEPTH``."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_PIPFILE:1
msgid "If set, this specifies a custom Pipfile location."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_PIPFILE:3
msgid "When running pipenv from a location other than the same directory where the Pipfile is located, instruct pipenv to find the Pipfile in the location specified by this environment variable."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_PIPFILE:7
msgid "Default is to find Pipfile automatically in the current and parent directories. See also ``PIPENV_MAX_DEPTH``."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_PYPI_MIRROR:1
msgid "If set, tells pipenv to override PyPI index urls with a mirror."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_PYPI_MIRROR:3
msgid "Default is to not mirror PyPI, i.e. use the real one, pypi.org. The ``--pypi-mirror`` command line flag overwrites this."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_RESOLVE_VCS:1
msgid "Tells Pipenv whether to resolve all VCS dependencies in full."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_RESOLVE_VCS:3
msgid "As of Pipenv 2018.11.26, only editable VCS dependencies were resolved in full. To retain this behavior and avoid handling any conflicts that arise from the new approach, you may set this to '0', 'off', or 'false'."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SHELL:1
msgid "An absolute path to the preferred shell for ``pipenv shell``."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SHELL:3
msgid "Default is to detect automatically what shell is currently in use."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SHELL_FANCY:1
msgid "If set, always use fancy mode when invoking ``pipenv shell``."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SHELL_FANCY:3
msgid "Default is to use the compatibility shell if possible."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SKIP_LOCK:1
msgid "If set, Pipenv won't lock dependencies automatically."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SKIP_LOCK:3
msgid "This might be desirable if a project has large number of dependencies, because locking is an inherently slow operation."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SKIP_LOCK:6
msgid "Default is to lock dependencies and update ``Pipfile.lock`` on each run."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SKIP_LOCK:8
msgid "NOTE: This only affects the ``install`` and ``uninstall`` commands."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SPINNER:1
msgid "Sets the default spinner type."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_SPINNER:3
msgid "Spinners are identitcal to the node.js spinners and can be found at https://github.com/sindresorhus/cli-spinners"
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_TIMEOUT:1
msgid "Max number of seconds Pipenv will wait for virtualenv creation to complete."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_TIMEOUT:3
msgid "Default is 120 seconds, an arbitrary number that seems to work."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_VENV_IN_PROJECT:1
msgid "If set, creates ``.venv`` in your project directory."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_VENV_IN_PROJECT:3
msgid "Default is to create new virtual environments in a global location."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_YES:1
msgid "If set, Pipenv automatically assumes \"yes\" at all prompts."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.PIPENV_YES:3
msgid "Default is to prompt the user for an answer if the current command line session if interactive."
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.is_in_virtualenv:1
msgid "Check virtualenv membership dynamically"
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.is_in_virtualenv:0
msgid "Returns"
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.is_in_virtualenv:3
msgid "True or false depending on whether we are in a regular virtualenv or not"
msgstr ""

#: ../../../pipenv/environments.py:docstring of pipenv.environments.is_in_virtualenv:0
msgid "Return type"
msgstr ""

#: ../../advanced.rst:421
msgid "If you'd like to set these environment variables on a per-project basis, I recommend utilizing the fantastic `direnv <https://direnv.net>`_ project, in order to do so."
msgstr ""

#: ../../advanced.rst:423
msgid "Also note that `pip itself supports environment variables <https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_, if you need additional customization."
msgstr ""

#: ../../advanced.rst:425
msgid "For example::"
msgstr ""

#: ../../advanced.rst:431
msgid "‚ò§ Custom Virtual Environment Location"
msgstr ""

#: ../../advanced.rst:433
msgid "Pipenv automatically honors the ``WORKON_HOME`` environment variable, if you have it set ‚Äî¬†so you can tell pipenv to store your virtual environments wherever you want, e.g.::"
msgstr ""

#: ../../advanced.rst:439
msgid "In addition, you can also have Pipenv stick the virtualenv in ``project/.venv`` by setting the ``PIPENV_VENV_IN_PROJECT`` environment variable."
msgstr ""

#: ../../advanced.rst:443
msgid "‚ò§ Testing Projects"
msgstr ""

#: ../../advanced.rst:445
msgid "Pipenv is being used in projects like `Requests`_ for declaring development dependencies and running the test suite."
msgstr ""

#: ../../advanced.rst:447
msgid "We've currently tested deployments with both `Travis-CI`_ and `tox`_ with success."
msgstr ""

#: ../../advanced.rst:450
msgid "Travis CI"
msgstr ""

#: ../../advanced.rst:452
msgid "An example Travis CI setup can be found in `Requests`_. The project uses a Makefile to define common functions such as its ``init`` and ``tests`` commands. Here is a stripped down example ``.travis.yml``::"
msgstr ""

#: ../../advanced.rst:473
msgid "and the corresponding Makefile::"
msgstr ""

#: ../../advanced.rst:484
msgid "Tox Automation Project"
msgstr ""

#: ../../advanced.rst:486
msgid "Alternatively, you can configure a ``tox.ini`` like the one below for both local and external testing::"
msgstr ""

#: ../../advanced.rst:505
msgid "Pipenv will automatically use the virtualenv provided by ``tox``. If ``pipenv install --dev`` installs e.g. ``pytest``, then installed command ``pytest`` will be present in given virtualenv and can be called directly by ``pytest tests`` instead of ``pipenv run pytest tests``."
msgstr ""

#: ../../advanced.rst:507
msgid "You might also want to add ``--ignore-pipfile`` to ``pipenv install``, as to not accidentally modify the lock-file on each test run. This causes Pipenv to ignore changes to the ``Pipfile`` and (more importantly) prevents it from adding the current environment to ``Pipfile.lock``. This might be important as the current environment (i.e. the virtualenv provisioned by tox) will usually contain the current project (which may or may not be desired) and additional dependencies from ``tox``'s ``deps`` directive. The initial provisioning may alternatively be disabled by adding ``skip_install = True`` to tox.ini."
msgstr ""

#: ../../advanced.rst:516
msgid "This method requires you to be explicit about updating the lock-file, which is probably a good idea in any case."
msgstr ""

#: ../../advanced.rst:519
msgid "A 3rd party plugin, `tox-pipenv`_ is also available to use Pipenv natively with tox."
msgstr ""

#: ../../advanced.rst:527
msgid "‚ò§ Shell Completion"
msgstr ""

#: ../../advanced.rst:529
msgid "To enable completion in fish, add this to your config::"
msgstr ""

#: ../../advanced.rst:533
msgid "Alternatively, with bash or zsh, add this to your config::"
msgstr ""

#: ../../advanced.rst:537
msgid "Magic shell completions are now enabled!"
msgstr ""

#: ../../advanced.rst:542
msgid "‚ò§ Working with Platform-Provided Python Components"
msgstr ""

#: ../../advanced.rst:544
msgid "It's reasonably common for platform specific Python bindings for operating system interfaces to only be available through the system package manager, and hence unavailable for installation into virtual environments with `pip`. In these cases, the virtual environment can be created with access to the system `site-packages` directory::"
msgstr ""

#: ../../advanced.rst:552
msgid "To ensure that all `pip`-installable components actually are installed into the virtual environment and system packages are only used for interfaces that don't participate in Python-level dependency resolution at all, use the `PIP_IGNORE_INSTALLED` setting::"
msgstr ""

#: ../../advanced.rst:563
msgid "‚ò§ Pipfile vs setup.py"
msgstr ""

#: ../../advanced.rst:565
msgid "There is a subtle but very important distinction to be made between **applications** and **libraries**. This is a very common source of confusion in the Python community."
msgstr ""

#: ../../advanced.rst:567
msgid "Libraries provide reusable functionality to other libraries and applications (let's use the umbrella term **projects** here). They are required to work alongside other libraries, all with their own set of subdependencies. They define **abstract dependencies**. To avoid version conflicts in subdependencies of different libraries within a project, libraries should never ever pin dependency versions. Although they may specify lower or (less frequently) upper bounds, if they rely on some specific feature/fix/bug. Library dependencies are specified via ``install_requires`` in ``setup.py``."
msgstr ""

#: ../../advanced.rst:569
msgid "Libraries are ultimately meant to be used in some **application**. Applications are different in that they usually are not depended on by other projects. They are meant to be deployed into some specific environment and only then should the exact versions of all their dependencies and subdependencies be made concrete. To make this process easier is currently the main goal of Pipenv."
msgstr ""

#: ../../advanced.rst:571
msgid "To summarize:"
msgstr ""

#: ../../advanced.rst:573
msgid "For libraries, define **abstract dependencies** via ``install_requires`` in ``setup.py``. The decision of which version exactly to be installed and where to obtain that dependency is not yours to make!"
msgstr ""

#: ../../advanced.rst:574
msgid "For applications, define **dependencies and where to get them** in the `Pipfile` and use this file to update the set of **concrete dependencies** in ``Pipfile.lock``. This file defines a specific idempotent environment that is known to work for your project. The ``Pipfile.lock`` is your source of truth. The ``Pipfile`` is a convenience for you to create that lock-file, in that it allows you to still remain somewhat vague about the exact version of a dependency to be used. Pipenv is there to help you define a working conflict-free set of specific dependency-versions, which would otherwise be a very tedious task."
msgstr ""

#: ../../advanced.rst:575
msgid "Of course, ``Pipfile`` and Pipenv are still useful for library developers, as they can be used to define a development or test environment."
msgstr ""

#: ../../advanced.rst:576
msgid "And, of course, there are projects for which the distinction between library and application isn't that clear. In that case, use ``install_requires`` alongside Pipenv and ``Pipfile``."
msgstr ""

#: ../../advanced.rst:578
msgid "You can also do this::"
msgstr ""

#: ../../advanced.rst:582
msgid "This will tell Pipenv to lock all your ``setup.py``‚Äìdeclared dependencies."
msgstr ""

#: ../../advanced.rst:585
msgid "‚ò§ Changing Pipenv's Cache Location"
msgstr ""

#: ../../advanced.rst:587
msgid "You can force Pipenv to use a different cache location by setting the environment variable ``PIPENV_CACHE_DIR`` to the location you wish. This is useful in the same situations that you would change ``PIP_CACHE_DIR`` to a different directory."
msgstr ""

#: ../../advanced.rst:590
msgid "‚ò§ Changing Default Python Versions"
msgstr ""

#: ../../advanced.rst:592
msgid "By default, Pipenv will initialize a project using whatever version of python the python3 is. Besides starting a project with the ``--three`` or ``--two`` flags, you can also use ``PIPENV_DEFAULT_PYTHON_VERSION`` to specify what version to use when starting a project when ``--three`` or ``--two`` aren't used."
msgstr ""

